#BlueJ class context
comment0.target=Court
comment1.params=
comment1.target=Court()
comment10.params=poi
comment10.target=Point[]\ poiSort(Point[])
comment10.text=\r\n\ POI\ Sorter.\r\n\ We\ eventually\ decided\ against\ using\ the\ Arraysort\ class\ by\ java\ as\ it\ would\ require\r\n\ knowledge\ of\ the\ implementation\ of\ interfaces\ which\ currently\ exceed\ our\ programming\ skill.\r\n\ @param\ poi\ Unsorted\ POI\ List\r\n\ @return\ neatly\ sorted\ POI\ List\ \:)\r\n
comment11.params=
comment11.target=void\ avoidObst()
comment11.text=\r\n\ The\ method\ makes\ the\ robot\ avoid\ an\ amount\ ov\ user-generated\ Obstacles.\r\n\ The\ robot\ has\ succeeded\ when\ it\ reaches\ the\ lower\ right\ corner.\r\n
comment12.params=
comment12.target=void\ pathLauncher()
comment12.text=\r\n\ This\ method\ makes\ the\ Robot\ find\ the\ quickest\ path\ to\ visit\ all\ given\ POI,\ runtime\ solely\ depends\ on\ number\ of\r\n\ POI\ as\ one\ movement\ always\ takes\ 4\ seconds\ (100\ steps\ *\ 40ms\ stall)\r\n
comment13.params=target\ steps\ stall
comment13.target=void\ moveTo(Point,\ int,\ int)
comment13.text=\r\n\ The\ robot\ will\ take\ the\ same\ time\ for\ any\ movement,\ but\ the\ animation\ will\ be\ smooth\ if\ there\ is\ sufficient.\r\n\ Computing\ power\ of\ course\ \:)\r\n
comment14.params=nextP\ stall
comment14.target=void\ movementGraph(Point,\ int)
comment14.text=\r\n\ Versatile\ movement\ animation\ method\ for\ the\ POI\ path\ below.\r\n\ @param\ nextP\ new\ robot\ position\r\n\ @param\ stall\ waiting\ time\r\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\r\n\ The\ main\ Method\ is\ the\ first\ thing\ a\ third\ party\ programmer\ looks\ at.\ Thus\ we\ kept\ it\ easy\ to\ read.\r\n\ @param\ args\r\n
comment3.params=
comment3.target=Point[]\ inputPoints()
comment3.text=\r\n\ POI-Input.\ See\ further\ descriptions\ at\ submethods\ below.\r\n\ @return\r\n
comment4.params=Message
comment4.target=int\ intInput(java.lang.String)
comment4.text=\r\n\ To\ increase\ the\ modularity\ and\ reduce\ the\ size\ of\ our\ program\ we\ decided\ to\ implement\r\n\ reusable\ input\ methods.\ The\ intinput\ method\ is\ secured\ by\ the\ try-catch\ method.\r\n\ To\ further\ protect\ the\ Program\ from\ its\ user,\ the\ limitinput\ method\ only\ allows\r\n\ inputs\ that\ are\ positive\ and\ below\ a\ certain\ max\ value.\ The\ Methods\ are\ made\ in\ a\ way\ that\r\n\ would\ allow\ later\ changes\ to\ the\ extend\ of\ the\ playing\ field\ as\ long\ as\ those\r\n\ changes\ limit\ to\ the\ first\ quadrant\ of\ coordinates.\r\n\ @param\ Message\r\n\ @return\r\n
comment5.params=input\ limit
comment5.target=int\ limitInput(int,\ int)
comment6.params=min\ max
comment6.target=int\ rng(int,\ int)
comment6.text=\r\n\ Lightweight,\ versatile\ RNG\ method\ and\ its\ extension\ for\ a\ random\ Color.\r\n
comment7.params=
comment7.target=java.awt.Color\ randCol()
comment8.params=index
comment8.target=Rectangle\ createRec(int)
comment8.text=\r\n\ \ Creating\ one\ random\ rectangle.\ The\ rectangles\ name\ is\ given\ by\ the\ caller\ of\ this\ method.\r\n\ \ Interference\ cannot\ occur\ as\ there\ is\ currently\ only\ one\ Rectangle\ generation\ Method\ per\ instance\r\n\ \ of\ 'court'\r\n\ @param\ index\ Identifier\r\n\ @return\ Random\ Rectangle\r\n
comment9.params=
comment9.target=java.util.ArrayList\ createObstacleList()
comment9.text=\r\n\ Creates\ a\ user-given\ amount\ of\ Rectangles.\ Further\ documentation\ below\!\r\n\ @return\r\n
numComments=15
